package commands

import (
	"context"
	"fmt"
	"log/slog"
	"strings"

	"github.com/Cladkoewka/grind-tracker/internal/service"
	"gopkg.in/telebot.v3"
)

type ProgressCommand struct {
	UserService  *service.UserService
	SkillService *service.SkillService
}

func (cmd *ProgressCommand) Handle(c telebot.Context) error {
	ctx := context.Background()
	telegramID := c.Sender().ID
	username := c.Sender().Username

	slog.Info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /progress", 
		slog.Int64("telegram_id", telegramID),
		slog.String("username", username),
	)

	user, err := cmd.UserService.RegisterOrGetUser(ctx, telegramID, username)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", slog.String("error", err.Error()))
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	}

	progressList, err := cmd.SkillService.GetUserSkillProgress(ctx, user.ID)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
			slog.Int64("user_id", user.ID),
			slog.String("error", err.Error()),
		)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
	}

	if len(progressList) == 0 {
		slog.Info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", slog.Int64("user_id", user.ID))
		return c.Send("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
	}

	var sb strings.Builder
	sb.WriteString("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–∞–≤—ã–∫–∞–º:\n\n")
	for _, p := range progressList {
		sb.WriteString(fmt.Sprintf("üõ† %s ‚Äî XP: %d, –£—Ä–æ–≤–µ–Ω—å: %d\n", p.SkillName, p.TotalXP, p.Level))
	}

	slog.Info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
		slog.Int64("user_id", user.ID),
		slog.Int("skills_count", len(progressList)),
	)

	return c.Send(sb.String())
}
