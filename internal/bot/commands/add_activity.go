package commands

import (
	"context"
	"log/slog"
	"strconv"
	"strings"

	"github.com/Cladkoewka/grind-tracker/internal/domain"
	"github.com/Cladkoewka/grind-tracker/internal/service"
	"gopkg.in/telebot.v3"
)

type AddActivityCommand struct {
	UserService     *service.UserService
	ActivityService *service.ActivityService
}

func (cmd *AddActivityCommand) Handle(c telebot.Context) error {
	slog.Info("–û–±—Ä–∞–±–æ—Ç–∫–∞ /add_activity", slog.String("payload", c.Message().Payload), slog.Int64("telegram_id", c.Sender().ID))

	args := strings.Split(c.Message().Payload, ";")
	if len(args) < 5 {
		slog.Warn("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ /add_activity", slog.Int("arg_len", len(args)))
		return c.Send(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>
<code>/add_activity skill_id; type; title; description; xp</code>

<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b>
‚Ä¢ <code>skill_id</code> ‚Äî –Ω–æ–º–µ—Ä –Ω–∞–≤—ã–∫–∞ (—Å–º. /skills)  
‚Ä¢ <code>type</code> ‚Äî —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–∏–¥–µ–æ, —Å—Ç–∞—Ç—å—è, –ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç)  
‚Ä¢ <code>title</code> ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ  
‚Ä¢ <code>description</code> ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–¥–µ–ª–∞–ª  
‚Ä¢ <code>xp</code> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>/add_activity 2; –í–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±; –ê–ª–≥–æ—Ä–∏—Ç–º—ã –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏; –ü–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ –æ –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ; 10</code>

üí° –ò—Å–ø–æ–ª—å–∑—É–π <b>/skills</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –Ω–∞–≤—ã–∫–æ–≤.`, telebot.ModeHTML)
	}

	skillID, err := strconv.ParseInt(strings.TrimSpace(args[0]), 10, 64)
	if err != nil {
		slog.Warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ skill_id", slog.String("error", err.Error()))
		return c.Send("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π skill_id. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤–≤–æ–¥–∏—à—å —á–∏—Å–ª–æ.")
	}

	xp, err := strconv.ParseInt(strings.TrimSpace(args[4]), 10, 64)
	if err != nil {
		slog.Warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XP", slog.String("error", err.Error()))
		return c.Send("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XP. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤–≤–æ–¥–∏—à—å —á–∏—Å–ª–æ.")
	}

	user, err := cmd.UserService.RegisterOrGetUser(context.Background(), c.Sender().ID, c.Sender().Username)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", slog.String("error", err.Error()))
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	}

	input := domain.AddActivityInput{
		UserID:      user.ID,
		SkillID:     skillID,
		Type:        strings.TrimSpace(args[1]),
		Title:       strings.TrimSpace(args[2]),
		Description: strings.TrimSpace(args[3]),
		XP:          xp,
	}

	slog.Info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", slog.Any("input", input))

	err = cmd.ActivityService.AddActivity(context.Background(), input)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", slog.String("error", err.Error()))
		return c.Send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
	}

	slog.Info("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", slog.Int64("user_id", user.ID))

	return c.Send("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™")
}
